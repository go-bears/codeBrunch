module Main where

import StartApp
import Html exposing (div, text, Html, input)
import Html.Attributes exposing (type')
import Html.Events exposing (targetValue, on)
import Signal exposing (Address, Message)
import String
main = 
  StartApp.start {model = model, view = view, update = update}


--assign word "Model" to mean a string
type alias Model = String
model: Model
model = "I am a model. Are you?"


type Action = UpdateText String

--update section, how elements in Model are changed
update: Action -> Model -> Model
update action model = 
  case action of 
  UpdateText newStr -> newStr


view: Address Action-> Model ->Html
view address model = 
    div[] 
    [ input [type' "text", on "input" targetValue (\str -> Signal.message address UpdateText str)] []
    , text (String.reverse model)
    ]
     
    